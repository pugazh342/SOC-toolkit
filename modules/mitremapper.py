# BlueDefenderX/modules/mitremapper.py
import yaml
from utils.logger import bd_logger

class MITREMapper:
    """
    Maps security detections (alerts, anomalies) to MITRE ATT&CK techniques.
    """
    def __init__(self, mappings_config_path="config/mitre_mappings.yaml"):
        """
        Initializes the MITREMapper by loading mappings from a config file.

        Args:
            mappings_config_path (str): Path to the YAML file containing mappings.
        """
        self.mappings_config_path = mappings_config_path
        self.mappings = self._load_mappings()
        bd_logger.info("MITREMapper initialized.")

    def _load_mappings(self):
        """
        Loads MITRE ATT&CK mappings from a YAML configuration file.

        Returns:
            dict: A dictionary of mappings.
        """
        try:
            with open(self.mappings_config_path, 'r') as f:
                config = yaml.safe_load(f)
                mappings = config.get('mappings', {})
                bd_logger.info(f"Loaded {len(mappings)} MITRE mappings from {self.mappings_config_path}")
                return mappings
        except FileNotFoundError:
            bd_logger.error(f"Mappings file not found: {self.mappings_config_path}")
            return {}
        except yaml.YAMLError as e:
            bd_logger.error(f"Error parsing YAML mappings file {self.mappings_config_path}: {e}")
            return {}
        except Exception as e:
            bd_logger.error(f"Unexpected error loading MITRE mappings: {e}")
            return {}

    def map_alert(self, alert_dict):
        """
        Maps a single alert dictionary to its corresponding MITRE technique.

        Args:
            alert_dict (dict): The alert dictionary generated by SIEMLite.

        Returns:
            dict: The alert dictionary with an added 'mitre' key containing mapping details.
                  Returns the original alert if no mapping is found.
        """
        rule_id = alert_dict.get('rule_id')
        mapped_technique = self.mappings.get(rule_id)

        if mapped_technique:
            # Add MITRE context to the alert
            alert_dict['mitre'] = mapped_technique
            bd_logger.debug(f"Mapped alert '{rule_id}' to MITRE {mapped_technique['technique_id']}")
        else:
            bd_logger.warning(f"No MITRE mapping found for alert rule_id: '{rule_id}'")
            # Optionally, add a default "unknown" mapping or leave it unmapped
            # alert_dict['mitre'] = {"technique_id": "Unknown", "technique_name": "Unmapped Detection", ...}
        
        return alert_dict

    def map_anomaly(self, anomaly_result_dict):
        """
        Maps a single anomaly detection result to a generic MITRE technique.
        This is a basic mapping. A more sophisticated system might analyze
        the features that caused the anomaly.

        Args:
            anomaly_result_dict (dict): The result dictionary from AnomalyDetector.

        Returns:
            dict: The anomaly result dictionary with an added 'mitre' key.
        """
        # Use the generic "__anomaly__" key from the mappings
        mapped_technique = self.mappings.get("__anomaly__")

        if mapped_technique:
            # Add MITRE context to the anomaly result
            anomaly_result_dict['mitre'] = mapped_technique
            bd_logger.debug("Mapped anomaly result to generic MITRE technique.")
        else:
            bd_logger.warning("No generic MITRE mapping found for anomalies.")
            # alert_dict['mitre'] = {...} # Add default if needed

        return anomaly_result_dict

    def map_alerts_batch(self, alerts_list):
        """
        Maps a list of alerts to their corresponding MITRE techniques.

        Args:
            alerts_list (list): A list of alert dictionaries.

        Returns:
            list: The list of alert dictionaries, each potentially enriched with MITRE context.
        """
        mapped_alerts = []
        for alert in alerts_list:
            mapped_alert = self.map_alert(alert)
            mapped_alerts.append(mapped_alert)
        return mapped_alerts

    def map_anomalies_batch(self, anomalies_list):
        """
        Maps a list of anomaly results to MITRE techniques.

        Args:
            anomalies_list (list): A list of anomaly result dictionaries.

        Returns:
            list: The list of anomaly dictionaries, each potentially enriched with MITRE context.
        """
        mapped_anomalies = []
        for anomaly in anomalies_list:
            # The anomaly dict might be the one inside the 'raw_event' or the main result dict
            # Assuming it's the main result dict which has 'raw_event', 'is_anomaly', 'anomaly_score'
            mapped_anomaly = self.map_anomaly(anomaly)
            mapped_anomalies.append(mapped_anomaly)
        return mapped_anomalies

# Example usage (if run directly)
if __name__ == '__main__':
    mapper = MITREMapper()
    
    # Example alert
    test_alert = {
        "rule_id": "T1110_001_brute_force_ssh",
        "title": "Potential SSH Brute Force Attempt",
        "severity": "high"
    }
    
    mapped_alert = mapper.map_alert(test_alert)
    print("Mapped Alert:")
    print(mapped_alert)

    # Example anomaly result
    test_anomaly = {
        "raw_event": {"src_ip": "1.2.3.4", "event_type": "ssh_failed_login"},
        "is_anomaly": True,
        "anomaly_score": -0.5
    }
    
    mapped_anomaly = mapper.map_anomaly(test_anomaly)
    print("\nMapped Anomaly:")
    print(mapped_anomaly)
